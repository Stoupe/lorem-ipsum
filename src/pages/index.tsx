import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { KeyboardEvent, useEffect, useState, useMemo } from "react";
import NavBar from "../components/NavBar";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
	console.log("rendering");

	const { data: text, refetch } = trpc.useQuery(["example.getWords"]);

	const { mutate: createResult } = trpc.useMutation("example.create-result");

	const [input, setInput] = useState("");
	const { data: session, status: sessionStatus } = useSession();

	const [gameState, setGameState] = useState<"idle" | "typing" | "finished">(
		"idle"
	);

	const [timeTaken, setTimeTaken] = useState(0);

	const [accuracy, setAccuracy] = useState(0);
	const [timeStarted, setTimeStarted] = useState<number>();

	const finished = input.length === text?.length ?? -1;

	useEffect(() => {
		let interval: any;
		if (gameState === "typing") {
			interval = setInterval(() => {
				setTimeTaken((prevTime) => prevTime + 10);
			}, 10);
		} else {
			clearInterval(interval);
		}
		return () => clearInterval(interval);
	}, [gameState]);

	useEffect(() => {
		if (input.length === 1 && gameState === "idle") {
			setGameState("typing");
		}

		if (input.length === text?.length) {
			setGameState("finished");
		}
	}, [input.length, gameState]);

	useEffect(() => {
		switch (gameState) {
			case "idle":
				break;
			case "typing":
				break;
			case "finished":
				if (text && session?.user?.id) {
					console.log("creating test result...");
					createResult({
						text: text,
						userId: session.user.id,
						accuracy: -1,
						timeTaken: timeTaken,
					});
				}
				setTimeTaken(0);
				setGameState("idle");
				setInput("");
				break;
		}
	}, [gameState]);

	if (sessionStatus === "loading" || !text) {
		return <div>Loading...</div>;
	}

	const checkInput = (e: KeyboardEvent<HTMLTextAreaElement>) => {
		if (e.key === "Backspace") {
			setInput((input) => input.slice(0, -1));
		}

		if (e.key === text[input.length]) {
			setInput((input) => input + e.key);
		}
	};

	return (
		<>
			<Head>
				<title>Lorem Ipsum Typer</title>
				<meta name="description" content="Generated by ..." />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<NavBar />

			{session?.user && (
				<div className="m-5">
					<h2>Hello, {session.user.name}</h2>
					<p>{session.user.email}</p>
					<Image
						src={session.user.image!}
						width={50}
						height={50}
						alt="Profile image"
					/>
				</div>
			)}

			<div className="p-5">
				<p>
					<span className="text-green-600">{text.slice(0, input.length)}</span>
					<span>{text.slice(input.length, text?.length)}</span>
				</p>

				<form className="form-control">
					<textarea
						placeholder="Type here"
						className="textarea textarea-bordered w-full mt-5"
						onKeyDown={(e) => checkInput(e)}
						onChange={() => {}}
						value={input}
					/>
				</form>

				<p>state: {gameState}</p>
				<p>time: {timeTaken / 100}s</p>
				<p>accuracy: {accuracy}</p>

				<button
					className="btn"
					onClick={() => {
						refetch();
						setInput("");
					}}
				>
					regenerate
				</button>

				{sessionStatus === "authenticated" && (
					<button
						className="btn btn-primary"
						onClick={() => {
							if (!session.user?.id) {
								throw new Error("User id is not defined");
							}

							createResult({
								userId: session.user.id,
								text: text,
								accuracy: 96,
								timeTaken: 34.32,
							});
						}}
					>
						create test result
					</button>
				)}
			</div>
		</>
	);
};

export default Home;
